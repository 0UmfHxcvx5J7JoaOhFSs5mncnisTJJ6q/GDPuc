% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calcUrban.R, R/calcUrbanFuture.R,
%   R/calcUrbanPast.R, R/calcUrbanPop.R
\name{calcUrban}
\alias{calcUrban}
\alias{calcUrbanFuture}
\alias{calcUrbanPast}
\alias{calcUrbanPop}
\title{Get scenarios and building blocks of urban population shares}
\usage{
calcUrban(
  UrbanCalib = "past",
  UrbanPast = "WDI",
  UrbanFuture = c("SSPs", "SDPs", "SSP2EU"),
  extension2150 = "constant",
  FiveYearSteps = TRUE,
  naming = "indicator_scenario"
)

calcUrbanFuture(UrbanFuture = "SSPs", extension2150 = "none")

calcUrbanPast(UrbanPast = "WDI")

calcUrbanPop(
  UrbanCalib = "past",
  UrbanPast = "WDI",
  UrbanFuture = c("SSPs", "SDPs", "SSP2EU"),
  extension2150 = "constant",
  FiveYearSteps = TRUE,
  naming = "indicator_scenario"
)
}
\arguments{
\item{UrbanCalib}{A string designating the harmonization function.
Available harmonization functions are:
\itemize{
\item "past": deprecated
\item "future": deprecated
}}

\item{UrbanPast}{Urban past data source}

\item{UrbanFuture}{Urban future data source}

\item{extension2150}{A string specifying if/how the scenarios should be extended until 2150. Can be either:
\itemize{
\item "bezier" (default): A bezier curve extension that leads to a smooth flattening of the scenario: the
slope in the last year of the scenario is halved by 2150. Currently only works for scenarios with 2100 as
their last year.
\item "constant": The last value of the scenarios is taken as constant until 2150.
\item "none": No extension.
}}

\item{FiveYearSteps}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} \code{FiveYearSteps = TRUE} will be deprecated soon. Until then,
please set \code{FiveYearSteps = FALSE} and use the calcOutput argument \code{years} instead, to retrieve specific years.}

\item{naming}{A string giving the naming scheme of the data dimension. Can be either:
\itemize{
\item "indicator_scenario" (default): Returns names of the type "gdp_SSP2", or "pop_SSP2".
\item "indicator.scenario": Returns names of the type "gdp.SSP2", or "pop.SSP2".
\item "scenario": Returns names of the type "SSP2".
}
Set naming to "scenario" when you want to operate on SSP2 gdp and population data for instance, and not have to
worry about the conflicting names.}
}
\value{
A magpie object with sets "iso3c", "year" and "variable".
}
\description{
Get complete scenarios of urban population share with calcUrban, or the past/future scenario building blocks with
calcUrbanPast and calcUrbanFuture. Get the urban popualation levels with calcUrbanPop.

Complete scenarios are created by harmonizing future projections (returned by calcUrbanFuture) onto historical
data (returned by calcUrbanPast) and cover the years between 1960 and 2100.

If urban population share data for a scenario is required, even if just for a single year, always use calcUrban, as
what is returned by calcUrbanPast or calcUrbanFuture may not end up as is in the scenario, depending on the
harmonization function used (see the Urbancalib argument for more information). Use calcUrbanPast and
calcUrbanFuture only when trying to access specific urban population share data, or when constructing new
complete scenarios.

By default, calcUrban returns the following scenarios:
\itemize{
\item the SSPs, i.e. SSP1-5 and SSP2EU
\item the SDPs, i.e. SDP, SDP_EI, SDP_RC, and SDP_MC
}
}
\section{Functions}{
\itemize{
\item \code{calcUrbanFuture()}: Get future urban population share projections

\item \code{calcUrbanPast()}: Get historic urban population share data

\item \code{calcUrbanPop()}: Get urban population scenarios

}}
\section{Return supplementary information}{
Set the \code{supplementary} argument of \code{\link[madrat:calcOutput]{madrat::calcOutput()}} to \code{TRUE} to return a list with the scenarios and
additional information on the unit, the data sources and the harmonization function.
}

\section{Vectorization of arguments}{
Vectors are accepted for -Calib, -Past and -Future arguments.
If given a vector, different combinations are created and returned all at once. If more than one
argument is vectorised, the arguments have to have the same length. Which time series are created can be
illustrated with the following example. Let's say the harmonization function and past data source are vectors of
length 3. Then there will be in total 3 time series that are produced: the first time series is the result of
combining the first harmonization function with the first past data source, the second time series the result of
combining the second harmonization function with the second past data source, and the third time series the result
of  using the respective third entry. The future data source used in each case is the same, since in this example
only one future data source is provided.
}

\examples{
\dontrun{
library(mrdrivers)
calcOutput("Urban")
}

\dontrun{
library(mrdrivers)
calcOutput("UrbanFuture")
}

\dontrun{
library(mrdrivers)
calcOutput("UrbanPast")
}

\dontrun{
library(mrdrivers)
calcOutput("UrbanPop")
}

}
\seealso{
\code{\link[madrat:calcOutput]{madrat::calcOutput()}}

Other mrdrivers calc-functions: 
\code{\link{calcGDPpc}()},
\code{\link{calcGDP}()},
\code{\link{calcPopulation}()}
}
\concept{mrdrivers calc-functions}
