% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calcGDPpc.R
\name{calcGDPpc}
\alias{calcGDPpc}
\title{calcGDPpc}
\usage{
calcGDPpc(
  GDPpcCalib = c("calibSSPs", "calibSDPs", "calibSSP2EU"),
  GDPpcPast = c("WDI-MI", "WDI-MI", "Eurostat-WDI-MI"),
  GDPpcFuture = c("SSPs-MI", "SDPs-MI", "SSP2EU-MI"),
  unit = "constant 2005 Int$PPP",
  extension2150 = "bezier",
  FiveYearSteps = TRUE,
  average2020 = TRUE,
  naming = "indicator_scenario"
)
}
\arguments{
\item{GDPpcCalib}{String or vector of strings}

\item{GDPpcPast}{String or vector of strings}

\item{GDPpcFuture}{String or vector of strings}

\item{unit}{A string specifying the unit of GDP. Can be either:
\itemize{
\item "constant 2005 Int$PPP" (default): Default unit in which the scenarios are constructed.
\item "constant 2005 US$MER": Scenarios are constructed in constant 2005 Int$PPP and converted before being
returned with \link[GDPuc:convertGDP]{GDPuc::convertGDP}.
\item "constant 2017 Int$PPP": Scenarios are constructed in constant 2017 Int$PPP (See paper).
\item "constant 2017 US$MER": Scenarios are constructed in constant 2017 Int$PPP and converted before being
returned with \link[GDPuc:convertGDP]{GDPuc::convertGDP}.
}
In all cases, GDP is returned in millions.}

\item{extension2150}{A string specifying if/how the scenarios should be extended until 2150. Can be either:
\itemize{
\item "bezier" (default): A bezier curve extension that leads to a smooth flattening of the scenario: the
slope in the last year of the scenario is halved by 2150. Currently only works for scenarios with 2100 as
their last year.
\item "constant": The last value of the scenarios is taken as constant until 2150.
\item "none": No extension.
}}

\item{FiveYearSteps}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} \code{FiveYearSteps = TRUE} is no
longer supported; use the calcOutput argument \code{years}  instead, to retrieve
specific years.}

\item{average2020}{TRUE (default) or FALSE. If TRUE, then the 2020 value is replaced by the 2018-2022 average.}

\item{naming}{A string giving the naming scheme of the data dimension. Can be either:
\itemize{
\item "indicator_scenario" (default): Returns names of the type "gdp_SSP2", or "pop_SSP2".
\item "indicator.scenario": Returns names of the type "gdp.SSP2", or "pop.SSP2".
\item "scenario": Returns names of the type "SSP2".
}
Set naming to "scenario" when you want to operate on SSP2 gdp and population data for instance, and not have to
worry about the conflicting names.}
}
\value{
A magpie object with sets "iso3c", "year" and "variable".
}
\description{
Get GDP per capita scenarios. By default the following scenarios are returned:
\itemize{
\item the SSPs, i.e. SSP1-5 and SSP2EU
\item the SDPs, i.e. SDP, SDP_EI, SDP_RC, and SDP_MC
}

The scenarios are created by harmonizing future projections onto historical data.
}
\section{Return supplementary information}{
Set the \code{supplementary} argument of \code{\link[madrat:calcOutput]{madrat::calcOutput()}} to \code{TRUE} to return a list with the scenarios and
additional information on the unit, the data sources and the harmonization function.
}

\section{Vectorization of arguments}{
Vectors are accepted for -Calib, -Past and -Future arguments.
If given a vector, different combinations are created and returned all at once. If more than one
argument is vectorised, the arguments have to have the same length. Which time series are created can be
illustrated with the following example. Let's say the harmonization function and past data source are vectors of
length 3. Then there will be in total 3 time series that are produced: the first time series is the result of
combining the first harmonization function with the first past data source, the second time series the result of
combining the second harmonization function with the second past data source, and the third time series the result
of  using the respective third entry. The future data source used in each case is the same, since in this example
only one future data source is provided.
}

\examples{
\dontrun{
library(mrdrivers)
calcOutput("GDPpc")
}

}
\seealso{
\code{\link[madrat:calcOutput]{madrat::calcOutput()}}

Other GDPpc functions: 
\code{\link{calcGDPpcFuture}()},
\code{\link{calcGDPpcPast}()}

Other mrdrivers functions: 
\code{\link{calcGDP}()},
\code{\link{calcPopulation}()},
\code{\link{calcUrbanPop}()},
\code{\link{calcUrban}()}
}
\concept{GDPpc functions}
\concept{mrdrivers functions}
